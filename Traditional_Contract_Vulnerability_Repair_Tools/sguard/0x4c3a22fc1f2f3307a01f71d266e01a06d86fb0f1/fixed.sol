contract sGuard{
  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
pragma solidity ^0.4.25;
contract Ownable  is sGuard {
  address public owner;
  constructor() public {
    owner = msg.sender;
  }
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
}
contract Hold is sGuard,  Ownable {
    uint public deadline = 1546230000;
    uint public amountRaised;
    event GoalReached(address recipient, uint totalAmountRaised);
    event FundTransfer(address backer, uint amount, bool isContribution);
    function () payable public {
        uint amount = msg.value;
        amountRaised = add_uint256(amountRaised, amount);  // fault line
    }
    modifier afterDeadline() { if (now >= deadline) _; }
    function safeWithdrawal() public afterDeadline {
        if (owner.send(amountRaised)) {
               emit FundTransfer(owner, amountRaised, false);
        }
    }
}
