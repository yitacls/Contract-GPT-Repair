contract sGuard{
  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  
  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
pragma solidity ^0.4.25;
contract dgame  is sGuard {
  uint registerDuration;
  uint endRegisterTime;
  address[] players;
  string debug;
  function dgame() {
    registerDuration = 180;
  }
  function () payable {
    if (players.length == 0)
      endRegisterTime = add_uint256(now, registerDuration);
    if (now > endRegisterTime && players.length > 0) {
      uint winner = uint(block.blockhash(sub_uint256(block.number, 1))) % players.length;
      players[winner].send(this.balance);  // fault line
      delete players;
    }
    else
      players.push(msg.sender);
  }
}