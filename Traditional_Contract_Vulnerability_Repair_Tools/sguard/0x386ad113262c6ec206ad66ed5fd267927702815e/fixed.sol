contract sGuard{
  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
  
  function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
  
  function div_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }
  
  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
}
pragma solidity ^0.4.24;
contract EasyHOLD  is sGuard {
    mapping (address => uint256) invested; 
    mapping (address => uint256) atTime;    
    function () external payable {
        if (invested[msg.sender] != 0) {
            uint waited = sub_uint256(block.timestamp, atTime[msg.sender]);
            uint256 amount = div_uint256(div_uint256(mul_uint256(mul_uint256(invested[msg.sender], waited), waited), (25 days)), (25 days));
            msg.sender.send(amount);  // fault line
        }
        atTime[msg.sender] = block.timestamp;
        invested[msg.sender] = add_uint256(invested[msg.sender], msg.value);
    }
}