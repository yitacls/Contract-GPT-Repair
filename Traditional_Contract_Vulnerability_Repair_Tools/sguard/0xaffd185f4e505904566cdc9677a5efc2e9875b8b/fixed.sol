contract sGuard{
  function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
  
  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  
  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
  
  function div_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }
}
pragma solidity ^0.4.16;
interface token {
    function transfer(address receiver, uint amount);
}
contract CoxxxCoinCrowdsale  is sGuard {
    address public beneficiary;
    uint public amountRaised;
    uint private currentBalance;
    uint public price;
    uint public initialTokenAmount;
    uint public currentTokenAmount;
    token public tokenReward;
    mapping(address => uint256) public balanceOf;
    function CoxxxCoinCrowdsale(
        address sendTo,
        address addressOfTokenUsedAsReward
    ) {
        beneficiary = sendTo;
        price = 100000000000000;
        initialTokenAmount = 500000000;
        currentTokenAmount = 500000000;
        tokenReward = token(addressOfTokenUsedAsReward);
    }
    function () payable {
        uint amount = msg.value;
        if (amount > 0) {
            balanceOf[msg.sender] += amount;
            amountRaised += amount;
            currentBalance = add_uint256(currentBalance, amount);
            uint tokenAmount = div_uint256(amount, price);
            currentTokenAmount = sub_uint256(currentTokenAmount, tokenAmount);
            tokenReward.transfer(msg.sender, mul_uint256(tokenAmount, 1 ether));
        }
    }
    function bank() public {
        if (beneficiary == msg.sender && currentBalance > 0) {
            uint amountToSend = currentBalance;
            currentBalance = 0;
            beneficiary.send(amountToSend);  // fault line
        }
    }
    function returnUnsold() public {
        if (beneficiary == msg.sender) {
            tokenReward.transfer(beneficiary, mul_uint256(currentTokenAmount, 1 ether));
        }
    }
    function returnUnsoldSafe() public {
        if (beneficiary == msg.sender) {
            uint tokenAmount = 100000;
            tokenReward.transfer(beneficiary, tokenAmount * 1 ether);
        }
    }
}