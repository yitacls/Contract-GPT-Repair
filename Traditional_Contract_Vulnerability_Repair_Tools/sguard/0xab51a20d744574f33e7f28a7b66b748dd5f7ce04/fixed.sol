contract sGuard{
  function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
  
  bool internal locked_;
  constructor() internal {
    locked_ = false;
  }
  modifier nonReentrant_() {
    require(!locked_);
    locked_ = true;
    _;
    locked_ = false;
  }
  
  function div_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }
  
  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
pragma solidity ^0.4.19;
contract EthDickMeasuringGame  is sGuard {
    address public largestPenisOwner;
    address public owner;
    uint public largestPenis;
    uint public withdrawDate;
    function EthDickMeasuringGame() public{
        owner = msg.sender;
        largestPenisOwner = 0;
        largestPenis = 0;
    }
    function () public payable{
        require(largestPenis < msg.value);
        largestPenis = msg.value;
        withdrawDate = add_uint256(now, 2 days);  // fault line
        largestPenisOwner = msg.sender;
    }
     function withdraw() nonReentrant_  public{
        require(now >= withdrawDate);
        largestPenis = 0;
        owner.transfer(div_uint256(mul_uint256(this.balance, 3), 100));
        largestPenisOwner.transfer(this.balance);
        largestPenisOwner = 0;
    }
}