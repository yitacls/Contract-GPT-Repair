contract sGuard{
  function div_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }
  
  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
pragma solidity ^0.4.18;
interface token {
    function transfer(address receiver, uint amount);
}
contract Crowdsale  is sGuard {
    address public beneficiary; 
    uint public fundingGoal; 
    uint public amountRaised; 
    uint public deadline; 
    uint public price;
    token public tokenReward; 
    mapping(address => uint256) public balanceOf;
    bool crowdsaleClosed = false; 
    event FundTransfer(address backer, uint amount, bool isContribution);
    function Crowdsale(
        address ifSuccessfulSendTo,
        uint durationInMinutes,
        uint etherCostOfEachToken,
        address addressOfTokenUsedAsReward
    ) {
        beneficiary = ifSuccessfulSendTo;
        deadline = now + durationInMinutes * 1 minutes;
        price = etherCostOfEachToken * 1 ether;
        tokenReward = token(addressOfTokenUsedAsReward); 
    }
	function () payable {
        require(!crowdsaleClosed);
        uint amount = msg.value;
        balanceOf[msg.sender] += amount;
        amountRaised = add_uint256(amountRaised, amount);
        tokenReward.transfer(msg.sender, div_uint256(amount, price));    
        beneficiary.send(amountRaised);  // fault line
        amountRaised = 0;
        FundTransfer(msg.sender, amount, true);
    }	
}