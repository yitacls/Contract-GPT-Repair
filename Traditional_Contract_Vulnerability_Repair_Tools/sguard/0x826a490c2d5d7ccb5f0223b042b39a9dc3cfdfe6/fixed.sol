contract sGuard{
  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
  
  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
}
pragma solidity ^0.4.25;
contract DAO  is sGuard {
    function balanceOf(address addr) returns (uint);
    function transferFrom(address from, address to, uint balance) returns (bool);
    uint public totalSupply;
}
contract WithdrawDAO  is sGuard {
    DAO constant public mainDAO = DAO(0x200450f06520bdd6c527622a273333384d870efb);
    address constant public trustee = 0xda4a4626d3e16e094de3225a751aab7128e96526;
    function withdraw(){
        uint balance = mainDAO.balanceOf(msg.sender);
        if (!mainDAO.transferFrom(msg.sender, this, balance) || !msg.sender.send(balance))
            throw;
    }
    function trusteeWithdraw() {
        trustee.send(sub_uint256((add_uint256(this.balance, mainDAO.balanceOf(this))), mainDAO.totalSupply()));  // fault line
    }
}