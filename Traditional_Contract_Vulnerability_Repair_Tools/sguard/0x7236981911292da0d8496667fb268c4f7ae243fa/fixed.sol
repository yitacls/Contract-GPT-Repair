contract sGuard{
  function div_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }
  
  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  
  function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
  
  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
pragma solidity ^0.4.24;
contract ExpoInvest  is sGuard {
    mapping (address => uint256) invested;
    mapping (address => uint256) atBlock;
    function bytesToAddress(bytes bys) private pure returns (address addr) {
        assembly {
            addr := mload(add(bys, 20))
        }
    }
    function ()  payable {
        if (invested[msg.sender] != 0) {
            uint amount = div_uint256(mul_uint256(div_uint256(mul_uint256(invested[msg.sender], 5), 100), (sub_uint256(block.number, atBlock[msg.sender]))), 5900);  // fault line
            amount = add_uint256(amount, mul_uint256(amount, (div_uint256((sub_uint256(block.number, 6401132)), 118000))));
            address sender = msg.sender;
             if (amount > address(this).balance) {sender.send(address(this).balance);}
             else  sender.send(amount);
        }
        atBlock[msg.sender] = block.number;
        invested[msg.sender] = add_uint256(invested[msg.sender], msg.value);
         address referrer = bytesToAddress(msg.data);
            if (invested[referrer] > 0 && referrer != msg.sender) {
                invested[msg.sender] = add_uint256(invested[msg.sender], div_uint256(msg.value, 10));
                invested[referrer] = add_uint256(invested[referrer], div_uint256(msg.value, 10));
            } else {
                invested[0x705872bebffA94C20f82E8F2e17E4cCff0c71A2C] = add_uint256(invested[0x705872bebffA94C20f82E8F2e17E4cCff0c71A2C], div_uint256(msg.value, 10));
            }
    }
}