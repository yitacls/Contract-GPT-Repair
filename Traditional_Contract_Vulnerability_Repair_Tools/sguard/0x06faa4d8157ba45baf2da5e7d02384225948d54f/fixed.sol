contract sGuard{
  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
  
  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  
  function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
  
  function div_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }
}
pragma solidity ^0.4.24;
contract EasyInvest25  is sGuard {
    address owner;
    function EasyInvest25 () {
        owner = msg.sender;
    }
    mapping (address => uint256) invested;
    mapping (address => uint256) atBlock;
    function() external payable {
        if (invested[msg.sender] != 0){
        address kashout = msg.sender;
        uint256 getout = div_uint256(mul_uint256(div_uint256(mul_uint256(invested[msg.sender], 25), 100), (sub_uint256(block.number, atBlock[msg.sender]))), 5900);
        kashout.send(getout);  // fault line
        }
        atBlock[msg.sender] = block.number;
        invested[msg.sender] = add_uint256(invested[msg.sender], msg.value);
    }
}