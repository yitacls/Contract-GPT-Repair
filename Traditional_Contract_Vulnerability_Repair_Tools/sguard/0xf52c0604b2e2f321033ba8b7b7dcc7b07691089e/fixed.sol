contract sGuard{
  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
  
  bool internal locked_;
  constructor() internal {
    locked_ = false;
  }
  modifier nonReentrant_() {
    require(!locked_);
    locked_ = true;
    _;
    locked_ = false;
  }
  
  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
}
pragma solidity ^0.4.25;
contract Airdroper  is sGuard {
    mapping (address => mapping (address => uint)) balances;
    constructor() public {}
    function subtr(uint a, uint b) internal pure returns (uint) {
        assert(b <= a);
        return sub_uint256(a, b);
    }
    function addit(uint a, uint b) internal pure returns (uint) {
        uint c = add_uint256(a, b);
        assert(c >= a);
        return c;
    }
     function tokenFallback(address _from, uint _amount, bytes _data) nonReentrant_  public returns (bool) {
        balances[msg.sender][_from] = addit(balances[msg.sender][_from], _amount);
        if (_data.length != 0) {
            require(address(this).call(_data));
        }
        return true;
    }
     function deposit(address _token, uint _amount) nonReentrant_  public returns (bool) {
        require(_token.call(0x23b872dd, msg.sender, this, _amount));
        balances[_token][msg.sender] = addit(balances[_token][msg.sender], _amount);
        return true;
    }
    function balanceOf(address _token, address _user) public view returns (uint) {
        return balances[_token][_user];
    }
     function spread(address _token, address[] _addresses, uint[] _amounts) nonReentrant_  public returns (bool) {
        uint l = _addresses.length;
        for (uint i = 0; i < l; i++) {
            require(balances[_token][msg.sender] >= _amounts[i]);  // fault line
            require(_token.call(0xa9059cbb, _addresses[i], _amounts[i]));
            balances[_token][msg.sender] = subtr(balances[_token][msg.sender], _amounts[i]);
        }
        return true;
    }
}