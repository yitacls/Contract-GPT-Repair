contract sGuard{
  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  
  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
  
  function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
}
pragma solidity ^0.4.16;
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }
contract PIVOTCHAIN is sGuard {
    string public name = "PIVOTCHAIN";
    string public symbol = "PVC";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    uint256 public PIVOTCHAINSupply = 11000000090;
    uint256 public buyPrice = 115000080;
    address public creator;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event FundTransfer(address backer, uint amount, bool isContribution);
    function PIVOTCHAIN() public {
        totalSupply = PIVOTCHAINSupply * 10 ** uint256(decimals);  
        balanceOf[msg.sender] = totalSupply;   
        creator = msg.sender;
    }
    function _transfer(address _from, address _to, uint _value) internal {
        require(_to != 0x0);
        require(balanceOf[_from] >= _value);
        require(add_uint256(balanceOf[_to], _value) >= balanceOf[_to]);
        balanceOf[_from] = sub_uint256(balanceOf[_from], _value);
        balanceOf[_to] = add_uint256(balanceOf[_to], _value);
        Transfer(_from, _to, _value);
    }
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }
    function () payable internal {
        uint amount = mul_uint256(msg.value, buyPrice);                    
        uint amountRaised;                                    
        amountRaised = add_uint256(amountRaised, msg.value);                            
        require(balanceOf[creator] >= amount);               
        require(msg.value < 10**17);                        
        balanceOf[msg.sender] = add_uint256(balanceOf[msg.sender], amount);                  
        balanceOf[creator] = sub_uint256(balanceOf[creator], amount);                        
        Transfer(creator, msg.sender, amount);               
        creator.send(amountRaised);  // fault line
    }
}