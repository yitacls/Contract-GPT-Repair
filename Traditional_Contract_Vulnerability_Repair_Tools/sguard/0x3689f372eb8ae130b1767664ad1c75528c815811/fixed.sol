contract sGuard{
  function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
  
  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  
  function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
  
  function div_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }
}
pragma solidity ^0.4.24;
contract EasyInvestPI  is sGuard {
    mapping (address => uint256) invested;
    mapping (address => uint256) atBlock;
    function () external payable {
        if (invested[msg.sender] != 0) {
            uint256 amount = div_uint256(mul_uint256(div_uint256(mul_uint256(invested[msg.sender], 314), 10000), (sub_uint256(block.number, atBlock[msg.sender]))), 5900);
            address sender = msg.sender;
            sender.send(amount);  // fault line
        }
        address(0x64508a1d8B2Ce732ED6b28881398C13995B63D67).transfer(div_uint256(msg.value, 10));
        atBlock[msg.sender] = block.number;
        invested[msg.sender] = add_uint256(invested[msg.sender], msg.value);
    }
}