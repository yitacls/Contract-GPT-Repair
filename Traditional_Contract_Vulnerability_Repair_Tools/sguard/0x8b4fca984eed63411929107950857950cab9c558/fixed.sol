contract sGuard{
  function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  
  function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
  
  function div_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a / b;
    return c;
  }
}
pragma solidity ^0.4.18;
contract Splitter  is sGuard {
    address public owner;   
    address public payee = 0xc1f1D804254C7241D7FfC56Fb2174EE9b42E6b94;   
    uint    public percent = 10; 
    function Splitter() public {
        owner   = msg.sender;
    }
    function Withdraw() external {
        require(msg.sender == owner);  // fault line
        owner.transfer(this.balance);
    }
    function() external payable {
        owner.transfer(div_uint256(mul_uint256(msg.value, percent), 100));
        payee.transfer(div_uint256(mul_uint256(msg.value, (sub_uint256(100, percent))), 100));
    }
}