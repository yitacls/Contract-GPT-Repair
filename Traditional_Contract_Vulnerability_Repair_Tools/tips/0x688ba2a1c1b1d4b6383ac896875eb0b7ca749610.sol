pragma solidity ^0.4.25;
library SafeMath {
	function mul(uint256 a, uint256 b) pure internal returns(uint256 ){
	uint256 c = a * b;
	assert(a == 0 || c / a == b);
	return c;
	}
	function div(uint256 a, uint256 b) pure internal returns(uint256 ){
	uint256 c = a / b;
	return c;
	}
	function sub(uint256 a, uint256 b) pure internal returns(uint256 ){
	assert(b <= a);
	return a - b;
	}
	function add(uint256 a, uint256 b) pure internal returns(uint256 ){
	uint256 c = a + b;
	assert(c >= a);
	return c;
	}
	
}contract token {
	function balanceOf(address _owner) view public returns(uint256 balance);function transfer(address _to, uint256 _value) public returns(bool success);
}contract Ownable {
	address public owner;
	event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
	constructor() public {
	owner = msg.sender;
	}
	modifier onlyOwner(){
	require(msg.sender == owner);
	_;}
	function transferOwnership(address newOwner) onlyOwner public {
	require(newOwner != address(0));
	emit OwnershipTransferred(owner, newOwner);
	owner = newOwner;
	}
	
}contract lockEtherPay is Ownable {
	using SafeMath for uint256;
	token token_reward;
	address public beneficiary;
	bool public isLocked = false;
	bool public isReleased = false;
	uint256 public start_time;
	uint256 public end_time;
	uint256 public fifty_two_weeks = 30067200;
	event TokenReleased(address beneficiary, uint256 token_amount);
	constructor() public {
	token_reward = token(0xAa1ae5e57dc05981D83eC7FcA0b3c7ee2565B7D6);
	beneficiary = 0xc70b61bE0c889f8244A46D332dF0FECF224d44Ee;
	}
	function tokenBalance() view public returns(uint256 ){
	return token_reward.balanceOf(this);
	}
	function lock() onlyOwner public returns(bool ){
	require(! isLocked);
	require(tokenBalance() > 0);
	start_time = now;
	end_time = start_time.add(fifty_two_weeks);
	isLocked = true;
	}
	function lockOver() view public returns(bool ){
	uint256 current_time = now;
	return current_time > end_time;
	}
	function release() onlyOwner public {
	require(isLocked);
	require(! isReleased);
	require(lockOver());
	uint256 token_amount = tokenBalance();
	if(! token_reward.call(beneficiary, token_amount)){
	throw;}
	emit TokenReleased(beneficiary, token_amount);
	isReleased = true;
	}
	
}