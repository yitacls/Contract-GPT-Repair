pragma solidity ^0.4.11;
contract ERC20Standard {
	uint public totalSupply;
	string public name;
	uint8 public decimals;
	string public symbol;
	string public version;
	mapping(address => uint256) balances;
	mapping(address => mapping(address => uint)) allowed;
	modifier onlyPayloadSize(uint size){
	assert(msg.data.length == size + 4);
	_;}
	function balanceOf(address _owner) view public returns(uint balance){
	return balances[_owner];
	}
	function transfer(address _recipient, uint _value) onlyPayloadSize(2 * 32) public {
	require(balances[msg.sender] >= _value && _value > 0);
	balances[msg.sender] -= _value;
	balances[_recipient] += _value;
	Transfer(msg.sender, _recipient, _value);
	}
	function transferFrom(address _from, address _to, uint _value) public {
	require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);
	balances[_to] += _value;
	balances[_from] -= _value;
	allowed[_from][msg.sender] -= _value;
	Transfer(_from, _to, _value);
	}
	function approve(address _spender, uint _value) public {
	allowed[msg.sender][_spender] = _value;
	Approval(msg.sender, _spender, _value);
	}
	function allowance(address _spender, address _owner) view public returns(uint balance){
	return allowed[_owner][_spender];
	}
	event Transfer(address indexed _from, address indexed _to, uint _value);
	event Approval(address indexed _owner, address indexed _spender, uint _value);
	
}contract Whales is ERC20Standard {
	constructor() public {
	totalSupply = 1000000000 * 10 ** 8;
	name = "Whales";
	decimals = 8;
	symbol = "WHL";
	version = "1.0";
	balances[msg.sender] = totalSupply;
	}
	
}