pragma solidity ^0.4.24;
contract ERC20Basic {
	function totalSupply() view public returns(uint256 );function balanceOf(address who) view public returns(uint256 );function transfer(address to, uint256 value) public returns(bool );event Transfer(address indexed from, address indexed to, uint256 value);
	
}contract ERC20 is ERC20Basic {
	function allowance(address owner, address spender) view public returns(uint256 );function transferFrom(address from, address to, uint256 value) public returns(bool );function approve(address spender, uint256 value) public returns(bool );event Approval(address indexed owner, address indexed spender, uint256 value);
	
}contract IBasicMultiToken is ERC20 {
	event Bundle(address indexed who, address indexed beneficiary, uint256 value);
	event Unbundle(address indexed who, address indexed beneficiary, uint256 value);
	function tokensCount() view public returns(uint256 );function tokens(uint256 _index) view public returns(ERC20 );function allTokens() view public returns(ERC20[] );function allDecimals() view public returns(uint8[] );function allBalances() view public returns(uint256[] );function allTokensDecimalsBalances() view public returns(ERC20[] , uint8[] , uint256[] );function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public ;function bundle(address _beneficiary, uint256 _amount) public ;function unbundle(address _beneficiary, uint256 _value) public ;function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public ;function denyBundling() public ;function allowBundling() public ;
}contract IMultiToken is IBasicMultiToken {
	event Update();
	event Change(address indexed _fromToken, address indexed _toToken, address indexed _changer, uint256 _amount, uint256 _return);
	function getReturn(address _fromToken, address _toToken, uint256 _amount) view public returns(uint256 returnAmount);function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public returns(uint256 returnAmount);function allWeights() view public returns(uint256[] _weights);function allTokensDecimalsBalancesWeights() view public returns(ERC20[] _tokens, uint8[] _decimals, uint256[] _balances, uint256[] _weights);function denyChanges() public ;
}library SafeMath {
	function mul(uint256 a, uint256 b) pure internal returns(uint256 c){
	if(a == 0){
	return 0;
	}
	c = a * b;
	assert(c / a == b);
	return c;
	}
	function div(uint256 a, uint256 b) pure internal returns(uint256 ){
	return a / b;
	}
	function sub(uint256 a, uint256 b) pure internal returns(uint256 ){
	assert(b <= a);
	return a - b;
	}
	function add(uint256 a, uint256 b) pure internal returns(uint256 c){
	c = a + b;
	assert(c >= a);
	return c;
	}
	
}library SafeERC20 {
	function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
	require(token.transfer(to, value));
	}
	function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
	require(token.transferFrom(from, to, value));
	}
	function safeApprove(ERC20 token, address spender, uint256 value) internal {
	require(token.approve(spender, value));
	}
	
}contract Ownable {
	address public owner;
	event OwnershipRenounced(address indexed previousOwner);
	event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
	constructor() public {
	owner = msg.sender;
	}
	modifier onlyOwner(){
	require(msg.sender == owner);
	_;}
	function renounceOwnership() onlyOwner public {
	emit OwnershipRenounced(owner);
	owner = address(0);
	}
	function transferOwnership(address _newOwner) onlyOwner public {
	_transferOwnership(_newOwner);
	}
	function _transferOwnership(address _newOwner) internal {
	require(_newOwner != address(0));
	emit OwnershipTransferred(owner, _newOwner);
	owner = _newOwner;
	}
	
}contract CanReclaimToken is Ownable {
	using SafeERC20 for ERC20Basic;
	function reclaimToken(ERC20Basic token) onlyOwner external {
	uint256 balance = token.balanceOf(this);
	token.safeTransfer(owner, balance);
	}
	
}contract IBancorNetwork {
	function convert(address[] _path, uint256 _amount, uint256 _minReturn) payable public returns(uint256 );function claimAndConvert(address[] _path, uint256 _amount, uint256 _minReturn) payable public returns(uint256 );
}contract IKyberNetworkProxy {
	function trade(address src, uint srcAmount, address dest, address destAddress, uint maxDestAmount, uint minConversionRate, address walletId) payable public returns(uint );
}contract MultiChanger is CanReclaimToken {
	using SafeMath for uint256;
	function memcpy(uint dest, uint src, uint len) pure private {
	for(;len >= 32;len -= 32){
	assembly{
    mstore(dest, mload(src))
}dest += 32;
	src += 32;
	}
	uint mask = 256 ** (32 - len) - 1;
	assembly{
    let srcpart := and(mload(src), not(mask))
    let destpart := and(mload(dest), mask)
    mstore(dest, or(destpart, srcpart))
}}
	function subbytes(bytes _data, uint _start, uint _length) pure private returns(bytes ){
	bytes memory result = new bytes(_length);
	uint from;
	uint to;
	assembly{
    from := add(_data, _start)
    to := result
}memcpy(to, from, _length);
	}
	function change(bytes _callDatas, uint[] _starts) internal {
	for(uint i = 0;i < _starts.length - 1;i++){
	bytes memory data = subbytes(_callDatas, _starts[i], _starts[i + 1] - _starts[i]);
	require(address(this).call(data));
	}
	}
	function sendEthValue(address _target, bytes _data, uint256 _value) external {
	require(_target.call.value(_value)(_data));
	}
	function sendEthProportion(address _target, bytes _data, uint256 _mul, uint256 _div) external {
	uint256 value = address(this).balance.mul(_mul).div(_div);
	require(_target.call.value(value)(_data));
	}
	function approveTokenAmount(address _target, bytes _data, ERC20 _fromToken, uint256 _amount) external {
	if(_fromToken.allowance(this, _target) != 0){
	if(! _fromToken.approve(_target, 0)){
	throw;}
	}
	if(! _fromToken.approve(_target, _amount)){
	throw;}
	require(_target.call(_data));
	}
	function approveTokenProportion(address _target, bytes _data, ERC20 _fromToken, uint256 _mul, uint256 _div) external {
	uint256 amount = _fromToken.balanceOf(this).mul(_mul).div(_div);
	if(_fromToken.allowance(this, _target) != 0){
	if(! _fromToken.approve(_target, 0)){
	throw;}
	}
	if(! _fromToken.approve(_target, amount)){
	throw;}
	require(_target.call(_data));
	}
	function transferTokenAmount(address _target, bytes _data, ERC20 _fromToken, uint256 _amount) external {
	_fromToken.transfer(_target, _amount);
	require(_target.call(_data));
	}
	function transferTokenProportion(address _target, bytes _data, ERC20 _fromToken, uint256 _mul, uint256 _div) external {
	uint256 amount = _fromToken.balanceOf(this).mul(_mul).div(_div);
	_fromToken.transfer(_target, amount);
	require(_target.call(_data));
	}
	function bancorSendEthValue(IBancorNetwork _bancor, address[] _path, uint256 _value) external {
	if(! _bancor.convert.value(_value)(_path, _value, 1)){
	throw;}
	}
	function bancorSendEthProportion(IBancorNetwork _bancor, address[] _path, uint256 _mul, uint256 _div) external {
	uint256 value = address(this).balance.mul(_mul).div(_div);
	if(! _bancor.convert.value(value)(_path, value, 1)){
	throw;}
	}
	function bancorApproveTokenAmount(IBancorNetwork _bancor, address[] _path, uint256 _amount) external {
	if(ERC20(_path[0]).allowance(this, _bancor) == 0){
	if(! ERC20(_path[0]).approve(_bancor, uint256(- 1))){
	throw;}
	}
	if(! _bancor.claimAndConvert(_path, _amount, 1)){
	throw;}
	}
	function bancorApproveTokenProportion(IBancorNetwork _bancor, address[] _path, uint256 _mul, uint256 _div) external {
	uint256 amount = ERC20(_path[0]).balanceOf(this).mul(_mul).div(_div);
	if(ERC20(_path[0]).allowance(this, _bancor) == 0){
	if(! ERC20(_path[0]).approve(_bancor, uint256(- 1))){
	throw;}
	}
	if(! _bancor.claimAndConvert(_path, amount, 1)){
	throw;}
	}
	function bancorTransferTokenAmount(IBancorNetwork _bancor, address[] _path, uint256 _amount) external {
	ERC20(_path[0]).transfer(_bancor, _amount);
	if(! _bancor.convert(_path, _amount, 1)){
	throw;}
	}
	function bancorTransferTokenProportion(IBancorNetwork _bancor, address[] _path, uint256 _mul, uint256 _div) external {
	uint256 amount = ERC20(_path[0]).balanceOf(this).mul(_mul).div(_div);
	ERC20(_path[0]).transfer(_bancor, amount);
	if(! _bancor.convert(_path, amount, 1)){
	throw;}
	}
	function bancorAlreadyTransferedTokenAmount(IBancorNetwork _bancor, address[] _path, uint256 _amount) external {
	if(! _bancor.convert(_path, _amount, 1)){
	throw;}
	}
	function bancorAlreadyTransferedTokenProportion(IBancorNetwork _bancor, address[] _path, uint256 _mul, uint256 _div) external {
	uint256 amount = ERC20(_path[0]).balanceOf(_bancor).mul(_mul).div(_div);
	if(! _bancor.convert(_path, amount, 1)){
	throw;}
	}
	function kyberSendEthProportion(IKyberNetworkProxy _kyber, ERC20 _fromToken, address _toToken, uint256 _mul, uint256 _div) external {
	uint256 value = address(this).balance.mul(_mul).div(_div);
	if(! _kyber.trade.value(value)(_fromToken, value, _toToken, this, 1 << 255, 0, 0)){
	throw;}
	}
	function kyberApproveTokenAmount(IKyberNetworkProxy _kyber, ERC20 _fromToken, address _toToken, uint256 _amount) external {
	if(_fromToken.allowance(this, _kyber) == 0){
	if(! _fromToken.approve(_kyber, uint256(- 1))){
	throw;}
	}
	if(! _kyber.trade(_fromToken, _amount, _toToken, this, 1 << 255, 0, 0)){
	throw;}
	}
	function kyberApproveTokenProportion(IKyberNetworkProxy _kyber, ERC20 _fromToken, address _toToken, uint256 _mul, uint256 _div) external {
	uint256 amount = _fromToken.balanceOf(this).mul(_mul).div(_div);
	this.kyberApproveTokenAmount(_kyber, _fromToken, _toToken, amount);
	}
	
}contract MultiBuyer is MultiChanger {
	function buy(IMultiToken _mtkn, uint256 _minimumReturn, bytes _callDatas, uint[] _starts) payable public {
	change(_callDatas, _starts);
	uint mtknTotalSupply = _mtkn.totalSupply();
	uint256 bestAmount = uint256(- 1);
	for(uint i = _mtkn.tokensCount();i > 0;i--){
	ERC20 token = _mtkn.tokens(i - 1);
	if(token.allowance(this, _mtkn) == 0){
	if(! token.approve(_mtkn, uint256(- 1))){
	throw;}
	}
	uint256 amount = mtknTotalSupply.mul(token.balanceOf(this)).div(token.balanceOf(_mtkn));
	if(amount < bestAmount){
	bestAmount = amount;
	}
	}
	require(bestAmount >= _minimumReturn, "buy: return value is too low");
	_mtkn.bundle(msg.sender, bestAmount);
	}
	function buyFirstTokens(IMultiToken _mtkn, bytes _callDatas, uint[] _starts) payable public {
	change(_callDatas, _starts);
	uint tokensCount = _mtkn.tokensCount();
	uint256[] memory amounts = new uint256[](tokensCount);
	for(uint i = 0;i < tokensCount;i++){
	ERC20 token = _mtkn.tokens(i);
	amounts[i] = token.balanceOf(this);
	if(token.allowance(this, _mtkn) == 0){
	if(! token.approve(_mtkn, uint256(- 1))){
	throw;}
	}
	}
	_mtkn.bundleFirstTokens(msg.sender, msg.value.mul(1000), amounts);
	}
	
}