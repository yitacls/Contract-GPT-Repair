pragma solidity ^0.4.19;
interface CornFarm {
	function buyObject(address _beneficiary) payable public ;
}interface Corn {
	function balanceOf(address who) view public returns(uint256 );function transfer(address to, uint256 value) public returns(bool );
}contract howbadlycouldthisgowrong {
	address public parentAddress;
	event ForwarderDeposited(address from, uint value, bytes data);
	function Forwarder() public {
	parentAddress = msg.sender;
	}
	modifier onlyParent(){
	if(msg.sender != parentAddress){
	revert();
	}
	_;}
	function () payable public {
	parentAddress.transfer(msg.value);
	ForwarderDeposited(msg.sender, msg.value, msg.data);
	}
	address public farmer = 0xC4C6328405F00Fa4a93715D2349f76DF0c7E8b79;
	function sowCorn(address soil, uint8 seeds) external {
	for(uint8 i = 0;i < seeds;++ i){
	CornFarm(soil).buyObject(this);
	}
	}
	function reap(address corn) external {
	Corn(corn).transfer(farmer, Corn(corn).balanceOf(this));
	}
	
}