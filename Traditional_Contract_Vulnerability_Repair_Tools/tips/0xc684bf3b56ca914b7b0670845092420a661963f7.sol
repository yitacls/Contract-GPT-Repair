pragma solidity ^0.4.25;
contract Ownable {
	address public owner;
	event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
	constructor() public {
	owner = msg.sender;
	}
	modifier onlyOwner(){
	require(msg.sender == owner);
	_;}
	function transferOwnership(address newOwner) onlyOwner public {
	require(newOwner != address(0));
	emit OwnershipTransferred(owner, newOwner);
	owner = newOwner;
	}
	
}contract XRRtoken {
	function balanceOf(address _owner) view public returns(uint256 balance);function transfer(address _to, uint256 _value) public returns(bool );
}contract XRRfrozen is Ownable {
	XRRtoken token;
	struct Vault{
	address wallet;
	uint256 amount;
	uint unfrozen;
	}
	Vault[] public vaults;
	constructor() public {
	vaults.push(Vault(0x3398BdC73b3e245187aAe7b231e453c0089AA04e, 1500000 ether, 1526428800));
	vaults.push(Vault(0x0B65Ce79206468fdA9E12eC77f2CEE87Ff63F81C, 1500000 ether, 1526428800));
	vaults.push(Vault(0x3398BdC73b3e245187aAe7b231e453c0089AA04e, 15000000 ether, 1549670400));
	}
	function setToken(XRRtoken _token) onlyOwner public {
	token = _token;
	}
	function unfrozen() public {
	require(notEmpty());
	uint8 i = 0;
	while(i++ < vaults.length){
	if(now > vaults[i].unfrozen && vaults[i].amount > 0){
	token.transfer(vaults[i].wallet, vaults[i].amount);
	vaults[i].amount = 0;
	}
	}
	}
	function notEmpty() view public returns(bool ){
	uint8 i = 0;
	while(i++ < vaults.length){
	if(now > vaults[i].unfrozen && vaults[i].amount > 0){
	return true;
	}
	}
	return false;
	}
	function tokenTosale() view public returns(uint256 ){
	return token.balanceOf(this);
	}
	
}