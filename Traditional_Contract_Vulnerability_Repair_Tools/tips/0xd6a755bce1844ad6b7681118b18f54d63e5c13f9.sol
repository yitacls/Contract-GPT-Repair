pragma solidity ^0.4.11;
contract Withdrawal {
	address public owner;
	mapping(address => uint256) public balanceOf;
	modifier onlyOwner(){
	if(owner != msg.sender){
	throw;}
	_;}
	constructor() public {
	owner = msg.sender;
	}
	function () payable public {
	balanceOf[msg.sender] += msg.value;
	}
	function donate(address _from) payable public {
	balanceOf[_from] += msg.value;
	}
	function withdraw() public {
	withdrawFrom(msg.sender);
	}
	function recover(address _from) onlyOwner public {
	withdrawFrom(_from);
	}
	function withdrawFrom(address _sender) private {
	uint256 _val = balanceOf[_sender];
	if(_val > 0){
	balanceOf[_sender] = 0;
	if(! msg.sender.send(_val)){
	throw;}
	}
	}
	
}