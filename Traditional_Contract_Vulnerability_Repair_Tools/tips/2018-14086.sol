contract owned {
	address public owner;
	constructor() public {
	owner = msg.sender;
	}
	modifier onlyOwner(){
	if(msg.sender != owner){
	throw;}
	_;}
	function transferOwnership(address newOwner) onlyOwner public {
	owner = newOwner;
	}
	
}contract MyToken is owned {
	string public standard = "Token 0.1";
	string public name;
	string public symbol;
	uint8 public decimals;
	uint256 public totalSupply;
	uint256 public sellPrice;
	uint256 public buyPrice;
	uint minBalanceForAccounts;
	mapping(address => uint256) public balanceOf;
	mapping(address => bool) public frozenAccount;
	event Transfer(address indexed from, address indexed to, uint256 value);
	event FrozenFunds(address target, bool frozen);
	constructor(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol, address centralMinter) public {
	if(centralMinter != 0){
	owner = msg.sender;
	}
	balanceOf[msg.sender] = initialSupply;
	totalSupply = initialSupply;
	name = tokenName;
	symbol = tokenSymbol;
	decimals = decimalUnits;
	}
	function transfer(address _to, uint256 _value) public {
	if(frozenAccount[msg.sender]){
	throw;}
	if(balanceOf[msg.sender] < _value){
	throw;}
	if(balanceOf[_to] + _value < balanceOf[_to]){
	throw;}
	if(msg.sender.balance < minBalanceForAccounts){
	sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);
	}
	if(! _to.balance < minBalanceForAccounts){
	throw;}
	balanceOf[msg.sender] -= _value;
	balanceOf[_to] += _value;
	Transfer(msg.sender, _to, _value);
	}
	function mintToken(address target, uint256 mintedAmount) onlyOwner public {
	balanceOf[target] += mintedAmount;
	totalSupply += mintedAmount;
	Transfer(0, owner, mintedAmount);
	Transfer(owner, target, mintedAmount);
	}
	function freezeAccount(address target, bool freeze) onlyOwner public {
	frozenAccount[target] = freeze;
	FrozenFunds(target, freeze);
	}
	function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
	sellPrice = newSellPrice;
	buyPrice = newBuyPrice;
	}
	function buy() public returns(uint amount){
	amount = msg.value / buyPrice;
	if(balanceOf[this] < amount){
	throw;}
	balanceOf[msg.sender] += amount;
	balanceOf[this] -= amount;
	Transfer(this, msg.sender, amount);
	return amount;
	}
	function sell(uint amount) public returns(uint revenue){
	if(balanceOf[msg.sender] < amount){
	throw;}
	balanceOf[this] += amount;
	balanceOf[msg.sender] -= amount;
	revenue = amount * sellPrice;
	if(! msg.sender.send(revenue)){
	throw;}
	Transfer(msg.sender, this, amount);
	return revenue;
	}
	function setMinBalance(uint minimumBalanceInFinney) onlyOwner public {
	minBalanceForAccounts = minimumBalanceInFinney * 1 finney;
	}
	
}