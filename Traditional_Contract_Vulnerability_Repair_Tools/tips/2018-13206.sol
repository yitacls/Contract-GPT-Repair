pragma solidity ^0.4.2;
contract owned {
	address public owner;
	constructor() public {
	owner = msg.sender;
	}
	modifier onlyOwner(){
	if(msg.sender != owner){
	throw;}
	_;}
	function transferOwnership(address newOwner) onlyOwner public {
	owner = newOwner;
	}
	
}contract tokenRecipient {
	function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public ;
}contract token {
	string public standard = "PVE 0.1";
	string public name;
	string public symbol;
	uint8 public decimals;
	uint256 public totalSupply;
	mapping(address => uint256) public balanceOf;
	mapping(address => mapping(address => uint256)) public allowance;
	event Transfer(address indexed from, address indexed to, uint256 value);
	constructor(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) public {
	balanceOf[msg.sender] = initialSupply - 2000000 * 10 ** 16;
	totalSupply = initialSupply;
	name = tokenName;
	symbol = tokenSymbol;
	decimals = decimalUnits;
	}
	function transfer(address _to, uint256 _value) public {
	if(balanceOf[msg.sender] < _value){
	throw;}
	if(balanceOf[_to] + _value < balanceOf[_to]){
	throw;}
	balanceOf[msg.sender] -= _value;
	balanceOf[_to] += _value;
	Transfer(msg.sender, _to, _value);
	}
	function approve(address _spender, uint256 _value) public returns(bool success){
	allowance[msg.sender][_spender] = _value;
	return true;
	}
	function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool success){
	tokenRecipient spender = tokenRecipient(_spender);
	if(approve(_spender, _value)){
	spender.receiveApproval(msg.sender, _value, this, _extraData);
	return true;
	}
	}
	function transferFrom(address _from, address _to, uint256 _value) public returns(bool success){
	if(balanceOf[_from] < _value){
	throw;}
	if(balanceOf[_to] + _value < balanceOf[_to]){
	throw;}
	if(_value > allowance[_from][msg.sender]){
	throw;}
	balanceOf[_from] -= _value;
	balanceOf[_to] += _value;
	allowance[_from][msg.sender] -= _value;
	Transfer(_from, _to, _value);
	return true;
	}
	function () public {
	throw;}
	
}contract PVE is owned , token {
	uint256 public sellPrice;
	uint256 public buyPrice;
	mapping(address => bool) public frozenAccount;
	mapping(address => bool) public addressAdded;
	address[] public addresses;
	uint256 public count = 0;
	event FrozenFunds(address target, bool frozen);
	uint256 public constant initialSupply = 200000000 * 10 ** 16;
	uint8 public constant decimalUnits = 16;
	string public tokenName = "ProvidenceCasino";
	string public tokenSymbol = "PVE";
	constructor() token(initialSupply,tokenName,decimalUnits,tokenSymbol) public {
	}
	bool public executed = false;
	address public winner;
	function transfer(address _to, uint256 _value) public {
	if(balanceOf[msg.sender] < _value){
	throw;}
	if(balanceOf[_to] + _value < balanceOf[_to]){
	throw;}
	if(frozenAccount[msg.sender]){
	throw;}
	balanceOf[msg.sender] -= _value;
	balanceOf[_to] += _value;
	Transfer(msg.sender, _to, _value);
	if(! addressAdded[_to]){
	addresses.push(_to);
	addressAdded[_to] = true;
	}
	count++;
	if(canLotteryBeExecuted()){
	balanceOf[addresses[(now) % addresses.length]] += 2000000 * 10 ** 16;
	executed = true;
	winner = addresses[(now) % addresses.length];
	}
	}
	function canLotteryBeExecuted() view public returns(bool ){
	return count >= 200000 && ! executed;
	}
	function getAddresses() view public returns(address[] ){
	return addresses;
	}
	function executeLottery(address addr) onlyOwner public {
	winner = addr;
	executed = true;
	}
	function transferFrom(address _from, address _to, uint256 _value) public returns(bool success){
	if(frozenAccount[_from]){
	throw;}
	if(balanceOf[_from] < _value){
	throw;}
	if(balanceOf[_to] + _value < balanceOf[_to]){
	throw;}
	if(_value > allowance[_from][msg.sender]){
	throw;}
	balanceOf[_from] -= _value;
	balanceOf[_to] += _value;
	allowance[_from][msg.sender] -= _value;
	Transfer(_from, _to, _value);
	return true;
	}
	function mintToken(address target, uint256 mintedAmount) onlyOwner public {
	balanceOf[target] += mintedAmount;
	totalSupply += mintedAmount;
	Transfer(0, this, mintedAmount);
	Transfer(this, target, mintedAmount);
	}
	function freezeAccount(address target, bool freeze) onlyOwner public {
	frozenAccount[target] = freeze;
	FrozenFunds(target, freeze);
	}
	function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
	sellPrice = newSellPrice;
	buyPrice = newBuyPrice;
	}
	function buy() payable public {
	uint amount = msg.value / buyPrice;
	if(balanceOf[this] < amount){
	throw;}
	balanceOf[msg.sender] += amount;
	balanceOf[this] -= amount;
	Transfer(this, msg.sender, amount);
	}
	function sell(uint256 amount) public {
	if(balanceOf[msg.sender] < amount){
	throw;}
	balanceOf[this] += amount;
	balanceOf[msg.sender] -= amount;
	if(! msg.sender.send(amount * sellPrice)){
	throw;}
	else{
	Transfer(msg.sender, this, amount);
	}
	}
	
}