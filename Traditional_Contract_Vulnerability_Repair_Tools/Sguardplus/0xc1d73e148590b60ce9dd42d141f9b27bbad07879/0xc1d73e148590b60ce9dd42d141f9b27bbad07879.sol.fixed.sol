pragma solidity ^0.4.22;

                        contract sGuardPlus {
                                constructor() internal {
                                        
                                        
                                }
                                function add_uint(uint a, uint b) internal pure returns (uint) {
                                uint c = a + b;
                                assert(c >= a);
                                return c;
                        }
                                
                                
                                
                        }
                contract EthReceiver is sGuardPlus {
bool     closed = false;
uint     unlockTime = 43200;
address     sender;
address     receiver;
function Put (address    _receiver) public payable {
if (( ! closed&&msg.value>0.5 ether)||sender==0x0)
{
sender=msg.sender;
receiver=_receiver;
unlockTime=add_uint(unlockTime, now);
}

}

function SetTime (uint    _unixTime) public  {
if (msg.sender==sender)
{
unlockTime=_unixTime;
}

}

function Get () public payable {
if (receiver==msg.sender&&now>=unlockTime)
{
msg.sender.transfer(address(this).balance);
}

}

function Close () public  {
if (sender==msg.sender)
{
closed=true;
}

}

function () public payable {
}

}
