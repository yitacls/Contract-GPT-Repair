pragma solidity ^0.4.16;

                        contract sGuardPlus {
                                constructor() internal {
                                        
                                        
                                }
                                function add_uint(uint a, uint b) internal pure returns (uint) {
                                uint c = a + b;
                                assert(c >= a);
                                return c;
                        }
function mul_uint(uint a, uint b) internal pure returns (uint) {
                                if (a == 0) {
                                        return 0;
                                }
                                uint c = a * b;
                                assert(c / a == b);
                                return c;
                        }
                                
                                
                                
                        }
                interface token  {
function transfer (address    receiver,uint    amount) public  ;
}
contract Crowdsale is sGuardPlus {
address  public   beneficiary;
uint  public   amountRaised;
uint  public   amountLeft;
uint  public   deadline;
token  public   tokenReward;
mapping (address  => uint256 ) public   balanceOf;
bool     crowdsaleClosed = false;
event GoalReached (address    recipient,uint    totalAmountRaised);
event FundTransfer (address    backer,uint    amount,bool    isContribution);
constructor (address    teamMultisig,uint    durationInMinutes,address    addressOfTokenUsedAsReward) public  {
beneficiary=teamMultisig;
deadline=add_uint(now, mul_uint(durationInMinutes, 1 minutes));
tokenReward=token(addressOfTokenUsedAsReward);
}

function () public payable {
require( ! crowdsaleClosed);
uint     amount = msg.value;
balanceOf[msg.sender]+=amount;
amountRaised+=amount;
tokenReward.transfer(msg.sender, amount*10000);
FundTransfer(msg.sender, amount, true);
if (beneficiary.send(amount))
{
FundTransfer(beneficiary, amount, false);
}
 else 
{
amountLeft+=amountLeft;
}

}

modifier afterDeadline (){
if (now>=deadline)
_;

}
function closeCrowdSale () public afterDeadline  {
if (beneficiary==msg.sender)
{
crowdsaleClosed=true;
}

}

function safeWithdrawal () public afterDeadline  {
if (beneficiary==msg.sender&&amountLeft>0)
{
if (beneficiary.send(amountLeft))
{
FundTransfer(beneficiary, amountLeft, false);
}
 else 
{
}

}

}

}
