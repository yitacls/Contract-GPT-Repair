pragma solidity ^0.4.18;

                        contract sGuardPlus {
                                constructor() internal {
                                        
                                        
                                }
                                function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
                                if (a == 0) {
                                        return 0;
                                }
                                uint256 c = a * b;
                                assert(c / a == b);
                                return c;
                        }
function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
                                uint256 c = a + b;
                                assert(c >= a);
                                return c;
                        }
function pow_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
                                uint256 c = 1;
                                for(uint256 i = 0; i < b; i = add_uint256(i, 1)){
                                        c = mul_uint256(c, a);
                                }
                                return c;
                        }
                                
                                
                                
                        }
                contract ZperPreSale is sGuardPlus {
uint256  public   totalContributed;
uint256  public   startTime;
uint256  public   endTime;
uint256  public   hardCap;
address  public   owner;
event Transfer (address  indexed  _from,address  indexed  _to,uint256    _value);
constructor (address    _owner,uint256    _start,uint256    _end,uint256    _cap) public  {
owner=_owner;
startTime=_start;
endTime=_end;
hardCap=mul_uint256(_cap, (pow_uint256(10, 18)));
}

function () external payable {
require(now>=startTime&&now<=endTime);
require(hardCap>=msg.value+totalContributed);
totalContributed+=msg.value;
}

modifier onlyOwner (){
assert(msg.sender==owner);
_;
}
function showContributed () public constant returns (uint256    total){
return totalContributed;
}

function forwardFunds (address    _to,uint256    _value) public onlyOwner  returns (bool    success){
require(_to!=address(0));
_to.transfer(_value);
Transfer(address(0), _to, _value);
return true;
}

}
