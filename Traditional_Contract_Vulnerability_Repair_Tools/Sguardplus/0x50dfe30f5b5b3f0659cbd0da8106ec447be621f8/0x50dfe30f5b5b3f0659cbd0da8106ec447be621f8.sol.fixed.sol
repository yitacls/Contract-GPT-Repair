pragma solidity ^0.4.11;

                        contract sGuardPlus {
                                constructor() internal {
                                        
                                        
                                }
                                function mul_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
                                if (a == 0) {
                                        return 0;
                                }
                                uint256 c = a * b;
                                assert(c / a == b);
                                return c;
                        }
function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
                                uint256 c = a + b;
                                assert(c >= a);
                                return c;
                        }
function pow_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
                                uint256 c = 1;
                                for(uint256 i = 0; i < b; i = add_uint256(i, 1)){
                                        c = mul_uint256(c, a);
                                }
                                return c;
                        }
                                
                                
                                
                        }
                contract HXL is sGuardPlus {
uint256  public   totalSupply;
string  public   name;
uint256  public   decimals;
string  public   symbol;
address  public   owner;
mapping (address  => uint256 )    balances;
mapping (address  => mapping (address  => uint256 ))    allowed;
constructor (uint256    _totalSupply,string    _symbol,string    _name,uint8    _decimalUnits) public  {
decimals=_decimalUnits;
symbol=_symbol;
name=_name;
owner=msg.sender;
totalSupply=mul_uint256(_totalSupply, (pow_uint256(10, decimals)));
balances[msg.sender]=totalSupply;
}

modifier onlyPayloadSize (uint    size){
assert(msg.data.length==size+4);
_;
}
function balanceOf (address    _owner) public constant returns (uint256    ){
return balances[_owner];
}

function transfer (address    _recipient,uint256    _value) public onlyPayloadSize(2*32)  {
require(balances[msg.sender]>=_value&&_value>0);
balances[msg.sender]-=_value;
balances[_recipient]+=_value;
Transfer(msg.sender, _recipient, _value);
}

function transferFrom (address    _from,address    _to,uint256    _value) public  {
require(balances[_from]>=_value&&allowed[_from][msg.sender]>=_value&&_value>0);
balances[_to]+=_value;
balances[_from]-=_value;
allowed[_from][msg.sender]-=_value;
Transfer(_from, _to, _value);
}

function approve (address    _spender,uint256    _value) public  {
allowed[msg.sender][_spender]=_value;
Approval(msg.sender, _spender, _value);
}

function allowance (address    _owner,address    _spender) public constant returns (uint256    ){
return allowed[_owner][_spender];
}

function mint (uint256    amount) public  {
assert(amount>=0);
require(msg.sender==owner);
balances[msg.sender]=add_uint256(balances[msg.sender], amount);
totalSupply=add_uint256(totalSupply, amount);
}

event Transfer (address  indexed  _from,address  indexed  _to,uint256    _value);
event Approval (address  indexed  _owner,address  indexed  _spender,uint256    _value);
}
