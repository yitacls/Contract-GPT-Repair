pragma solidity ^0.4.25;

                        contract sGuardPlus {
                                constructor() internal {
                                        
                                        
                                }
                                function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
                                assert(b <= a);
                                return a - b;
                        }
function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
                                uint256 c = a + b;
                                assert(c >= a);
                                return c;
                        }
                                
                                
                                
                        }
                contract Mattew is sGuardPlus {
address     whale;
uint256     stake;
uint256     blockheight;
uint256   constant  PERIOD = 200;
uint   constant  DELTA = 0.1 ether;
event MattewWon (string    msg,address    winner,uint    value,uint    blocknumber);
event StakeIncreased (string    msg,address    staker,uint    value,uint    blocknumber);
constructor ()   {
setFacts();
}

function setFacts () private  {
stake=msg.value;
blockheight=block.number;
whale=msg.sender;
}

function ()  payable {
if (sub_uint256(block.number, PERIOD)>blockheight)
{
bool     isSuccess = whale.send(stake);
require(isSuccess);
MattewWon("Mattew won (mattew, stake, blockheight)", whale, stake, block.number);
setFacts();
return ;
}
 else 
{
if (msg.value<add_uint256(stake, DELTA))
throw;
bool     isOtherSuccess = msg.sender.send(stake);
require(isOtherSuccess);
setFacts();
StakeIncreased("stake increased (whale, stake, blockheight)", whale, stake, blockheight);
}

}

function getStake () public constant returns (uint    ){
return stake;
}

function getBlocksTillMattew () public constant returns (uint    ){
if (add_uint256(blockheight, PERIOD)>block.number)
return sub_uint256(add_uint256(blockheight, PERIOD), block.number);
 else 
return 0;

}

}
