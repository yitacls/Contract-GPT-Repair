pragma solidity ^0.4.25;

                        contract sGuardPlus {
                                constructor() internal {
                                        
                                        
                                }
                                function sub_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
                                assert(b <= a);
                                return a - b;
                        }
function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
                                uint256 c = a + b;
                                assert(c >= a);
                                return c;
                        }
                                
                                
                                
                        }
                contract CoinByInsomnia is sGuardPlus {
string  public   name = "CoinByInsomnia";
string  public   symbol = "CBI";
string  public   standard = "CoinByInsomnia v1.0";
uint256  public   totalSupply;
event Transfer (address  indexed  _from,address  indexed  _to,uint256    _value);
event Approval (address  indexed  _owner,address  indexed  _spender,uint256    _value);
mapping (address  => uint256 ) public   balanceOf;
mapping (address  => mapping (address  => uint256 )) public   allowance;
constructor (uint256    _initialSupply) public  {
balanceOf[msg.sender]=_initialSupply;
totalSupply=_initialSupply;
}

function transfer (address    _to,uint256    _value) public  returns (bool    success){
require(balanceOf[msg.sender]>=_value);
balanceOf[msg.sender]=sub_uint256(balanceOf[msg.sender], _value);
balanceOf[_to]=add_uint256(balanceOf[_to], _value);
emit Transfer(msg.sender, _to, _value);
return true;
}

function approve (address    _spender,uint256    _value) public  returns (bool    success){
allowance[msg.sender][_spender]=_value;
emit Approval(msg.sender, _spender, _value);
return true;
}

function transferFrom (address    _from,address    _to,uint256    _value) public  returns (bool    success){
require(_value<=balanceOf[_from]);
require(_value<=allowance[_from][msg.sender]);
balanceOf[_from]=sub_uint256(balanceOf[_from], _value);
balanceOf[_to]=add_uint256(balanceOf[_to], _value);
allowance[_from][msg.sender]=sub_uint256(allowance[_from][msg.sender], _value);
emit Transfer(_from, _to, _value);
return true;
}

}
