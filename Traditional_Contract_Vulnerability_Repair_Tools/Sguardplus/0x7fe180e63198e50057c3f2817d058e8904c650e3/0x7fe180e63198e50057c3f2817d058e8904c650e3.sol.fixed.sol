pragma solidity ^0.4.11;

                        contract sGuardPlus {
                                constructor() internal {
                                        
                                        
                                }
                                function sub_uint(uint a, uint b) internal pure returns (uint) {
                                assert(b <= a);
                                return a - b;
                        }
                                
                                
                                
                        }
                contract Conference is sGuardPlus {
address  public   organizer;
mapping (address  => uint ) public   registrantsPaid;
uint  public   numRegistrants;
uint  public   quota;
event Deposit (address    _from,uint    _amount);
event Refund (address    _to,uint    _amount);
constructor ()   {
organizer=msg.sender;
quota=100;
numRegistrants=0;
}

function buyTicket () public  {
if (numRegistrants>=quota)
{
throw;}

registrantsPaid[msg.sender]=msg.value;
numRegistrants ++ ;
Deposit(msg.sender, msg.value);
}

function changeQuota (uint    newquota) public  {
if (msg.sender!=organizer)
{
return ;
}

quota=newquota;
}

function refundTicket (address    recipient,uint    amount) public  {
if (msg.sender!=organizer)
{
return ;
}

if (registrantsPaid[recipient]==amount)
{
address     myAddress = this;
if (myAddress.balance>=amount)
{
bool     __sent_result102 = (recipient.send(amount));
require(__sent_result102);
Refund(recipient, amount);
registrantsPaid[recipient]=0;
numRegistrants=sub_uint(numRegistrants, 1);
}

}

return ;
}

function destroy ()   {
if (msg.sender==organizer)
{
suicide(organizer);
}

}

}
