pragma solidity ^0.4.19;

                        contract sGuardPlus {
                                constructor() internal {
                                        
                                        
                                }
                                function add_uint(uint a, uint b) internal pure returns (uint) {
                                uint c = a + b;
                                assert(c >= a);
                                return c;
                        }
                                
                                
                                
                        }
                contract EthDickMeasuringGame is sGuardPlus {
address  public   largestPenisOwner;
address  public   owner;
uint  public   largestPenis;
uint  public   withdrawDate;
constructor () public  {
owner=msg.sender;
largestPenisOwner=0;
largestPenis=0;
}

function () public payable {
require(largestPenis<msg.value);
largestPenis=msg.value;
withdrawDate=add_uint(now, 2 days);
largestPenisOwner=msg.sender;
}

function withdraw () public  {
require(now>=withdrawDate);
largestPenis=0;
owner.transfer(this.balance*3/100);
largestPenisOwner.transfer(this.balance);
largestPenisOwner=0;
}

}
