pragma solidity ^0.4.11;

                        contract sGuardPlus {
                                constructor() internal {
                                        
                                        
                                }
                                function add_uint(uint a, uint b) internal pure returns (uint) {
                                uint c = a + b;
                                assert(c >= a);
                                return c;
                        }
                                
                                
                                
                        }
                contract XG4K is sGuardPlus {
address  public   coiner;
mapping (address  => uint ) public   balances;
event Issue (address    from,address    to,uint    amount);
constructor () public  {
coiner=msg.sender;
balances[msg.sender]=100000;
}

function mint (address    receiver,uint    amount) public  {
if (msg.sender!=coiner)
return ;

balances[receiver]=add_uint(balances[receiver], amount);
}

function send (address    receiver,uint    amount) public  {
if (balances[msg.sender]<amount)
return ;

balances[msg.sender]-=amount;
balances[receiver]+=amount;
Issue(msg.sender, receiver, amount);
}

}
