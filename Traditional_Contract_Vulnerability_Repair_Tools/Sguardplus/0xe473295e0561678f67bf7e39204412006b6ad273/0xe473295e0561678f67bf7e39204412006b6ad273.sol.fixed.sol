pragma solidity ^0.4.17;

                        contract sGuardPlus {
                                constructor() internal {
                                        
                                        
                                }
                                function add_uint(uint a, uint b) internal pure returns (uint) {
                                uint c = a + b;
                                assert(c >= a);
                                return c;
                        }
                                
                                
                                
                        }
                contract BountyEscrow is sGuardPlus {
address  public   admin;
constructor () public  {
admin=msg.sender;
}

event Payout (address  indexed  sender,address  indexed  recipient,uint256  indexed  sequenceNum,uint256    amount,bool    success);
function payout (address []   recipients,uint256 []   amounts) public  {
require(admin==msg.sender);
require(recipients.length==amounts.length);
for(uint     i = 0;i<recipients.length; i=add_uint(i, 1)){
Payout(msg.sender, recipients[i], add_uint(i, 1), amounts[i], recipients[i].send(amounts[i]));
}

}

function () public payable {
}

}
