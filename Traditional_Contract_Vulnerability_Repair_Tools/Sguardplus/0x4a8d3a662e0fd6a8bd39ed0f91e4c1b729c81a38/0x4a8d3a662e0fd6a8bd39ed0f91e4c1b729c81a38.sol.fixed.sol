pragma solidity ^0.4.25;

                        contract sGuardPlus {
                                constructor() internal {
                                        
                                        
                                }
                                function add_uint256(uint256 a, uint256 b) internal pure returns (uint256) {
                                uint256 c = a + b;
                                assert(c >= a);
                                return c;
                        }
                                
                                
                                
                        }
                library SafeMath  {
function mul (uint256    a,uint256    b) internal pure returns (uint256    ){
if (a==0)
{
return 0;
}

uint256     c = a*b;
assert(c/a==b);
return c;
}

function div (uint256    a,uint256    b) internal pure returns (uint256    ){
return a/b;
}

function sub (uint256    a,uint256    b) internal pure returns (uint256    ){
assert(b<=a);
return a-b;
}

function add (uint256    a,uint256    b) internal pure returns (uint256    ){
uint256     c = a+b;
assert(c>=a);
return c;
}

}
contract HODLWallet is sGuardPlus {
using SafeMath for uint256 ;
address  internal   owner;
mapping (address  => uint256 ) public   balances;
mapping (address  => uint256 ) public   withdrawalCount;
mapping (address  => mapping (address  => bool )) public   approvals;
uint256  public constant  MAX_WITHDRAWAL = 0.002*1000000000000000000;
modifier onlyOwner (){
require(msg.sender==owner);
_;
}
constructor (address []   addrs,uint256 []   _balances) public payable {
require(addrs.length==_balances.length);
owner=msg.sender;
for(uint256     i = 0;i<addrs.length; i ++ ){
balances[addrs[i]]=_balances[i];
withdrawalCount[addrs[i]]=0;
}

}

function doWithdraw (address    from,address    to,uint256    amount) internal  {
require(amount<=MAX_WITHDRAWAL);
require(balances[from]>=amount);
require(withdrawalCount[from]<3);
balances[from]=balances[from].sub(amount);
bool     __sent_result100 = to.call.value(amount)();
require(__sent_result100);
withdrawalCount[from]=withdrawalCount[from].add(1);
}

function () public payable {
deposit();
}

function doDeposit (address    to) internal  {
require(msg.value>0);
balances[to]=balances[to].add(msg.value);
}

function deposit () public payable {
doDeposit(msg.sender);
}

function depositTo (address    to) public payable {
doDeposit(to);
}

function withdraw (uint256    amount) public  {
doWithdraw(msg.sender, msg.sender, amount);
}

function withdrawTo (address    to,uint256    amount) public  {
doWithdraw(msg.sender, to, amount);
}

function withdrawFor (address    from,uint256    amount) public  {
require(approvals[from][msg.sender]);
doWithdraw(from, msg.sender, amount);
}

function withdrawForTo (address    from,address    to,uint256    amount) public  {
require(approvals[from][msg.sender]);
doWithdraw(from, to, amount);
}

function destroy () public onlyOwner  {
selfdestruct(owner);
}

function getBalance (address    toCheck) public constant returns (uint256    ){
return balances[toCheck];
}

function addBalances (address []   addrs,uint256 []   _balances) public onlyOwner payable {
require(addrs.length==_balances.length);
for(uint256     i = 0;i<addrs.length; i=add_uint256(i, 1)){
balances[addrs[i]]=_balances[i];
withdrawalCount[addrs[i]]=0;
}

}

function approve (address    toApprove) public  {
require(balances[msg.sender]>0);
approvals[msg.sender][toApprove]=true;
}

function unapprove (address    toUnapprove) public  {
require(balances[msg.sender]>0);
approvals[msg.sender][toUnapprove]=false;
}

}
