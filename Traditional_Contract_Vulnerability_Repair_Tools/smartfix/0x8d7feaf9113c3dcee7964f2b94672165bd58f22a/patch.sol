pragma solidity ^0.4.25;
contract Vault {
    mapping (address=>uint256) public eth_stored;
    address public owner;
    address public client_wallet;
    address public primary_wallet;
    constructor (address main_wallet, address other_wallet) public {
        owner = msg.sender;
        primary_wallet = main_wallet;
        client_wallet = other_wallet;
    }
    event Contribution (address investor, uint256 eth_paid);
    function () public payable {
        require(((eth_stored[msg.sender] + msg.value) >= eth_stored[msg.sender])); /* <FIX> Insert:BC */
        eth_stored[msg.sender] += msg.value;  // fault line
        emit Contribution(msg.sender, msg.value);
        require(((msg.value == 0) || (((msg.value * 3) / msg.value) == 3))); /* <FIX> Insert:BC */
        uint256 client_share = msg.value*3/10;
        require((msg.value >= client_share)); /* <FIX> Insert:BC */
        uint256 our_share = msg.value - client_share;
        client_wallet.transfer(client_share);
        primary_wallet.transfer(our_share);
    }
}
